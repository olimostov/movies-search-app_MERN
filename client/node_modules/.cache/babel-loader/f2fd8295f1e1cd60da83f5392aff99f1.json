{"ast":null,"code":"var _jsxFileName = \"/Users/olimostovyi/Documents/WebDev/projects/movie-search-app/client/src/components/Home.js\",\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport MoviesContainer from './MoviesContainer';\nimport SearchBox from './SearchBox';\nimport { useMovies } from '../hooks/useMovies';\nimport { useFetch } from '../hooks/useFetch';\nimport M from 'materialize-css'; // initializing materialize autofill input\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst autoInput = M.Autocomplete.init();\n\nconst Home = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const {\n    isLoading,\n    movies\n  } = useMovies(searchTerm);\n  const [inputOptions, setInputOptions] = useState(null); // building input options object\n\n  useEffect(_s(() => {\n    _s();\n\n    useFetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`).then(res => {\n      return res.json();\n    }).then(data => {\n      let options = {};\n      data.map(movie => {\n        return options[`${movie.movieData.original_title}`] = null;\n      });\n      console.log('options :>> ', options);\n      return options;\n    }).then(opts => {\n      autoInput.updateData(opts);\n    });\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  }), [searchTerm]);\n\n  const onSearchInputChange = input => {\n    setSearchTerm(input); // getInputOptions(movies);\n  }; // displaying options\n  // autoInput.updateData(getInputOptions(movies));\n\n\n  let moviesDom;\n\n  if (isLoading) {\n    moviesDom = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this);\n  } else {\n    moviesDom = /*#__PURE__*/_jsxDEV(MoviesContainer, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n      searchTerm: searchTerm,\n      onSearchInputChange: onSearchInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), moviesDom]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Home, \"JOhQAhxz9ZBYzXVG7lpns9Hh3PQ=\", false, function () {\n  return [useMovies];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/olimostovyi/Documents/WebDev/projects/movie-search-app/client/src/components/Home.js"],"names":["useEffect","useState","MoviesContainer","SearchBox","useMovies","useFetch","M","autoInput","Autocomplete","init","Home","searchTerm","setSearchTerm","isLoading","movies","inputOptions","setInputOptions","apiKey","then","res","json","data","options","map","movie","movieData","original_title","console","log","opts","updateData","onSearchInputChange","input","moviesDom"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,CAAP,MAAc,iBAAd,C,CAEA;;;AACA,MAAMC,SAAS,GAAGD,CAAC,CAACE,YAAF,CAAeC,IAAf,EAAlB;;AACA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAAA;;AACjB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAEY,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAwBV,SAAS,CAACO,UAAD,CAAvC;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD,CAJiB,CAMjB;;AACAD,EAAAA,SAAS,IAAC,MAAM;AAAA;;AACdK,IAAAA,QAAQ,CACL,qDAAoDY,MAAO,UAASN,UAAW,sBAD1E,CAAR,CAGGO,IAHH,CAGQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KALH,EAMGF,IANH,CAMQG,IAAI,IAAI;AACZ,UAAIC,OAAO,GAAG,EAAd;AACAD,MAAAA,IAAI,CAACE,GAAL,CAASC,KAAK,IAAI;AAChB,eAAQF,OAAO,CAAE,GAAEE,KAAK,CAACC,SAAN,CAAgBC,cAAe,EAAnC,CAAP,GAA+C,IAAvD;AACD,OAFD;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,OAA5B;AACA,aAAOA,OAAP;AACD,KAbH,EAcGJ,IAdH,CAcQW,IAAI,IAAI;AACZtB,MAAAA,SAAS,CAACuB,UAAV,CAAqBD,IAArB;AACD,KAhBH;AAiBD,GAlBQ;AAAA,YACPxB,QADO;AAAA,MAkBN,CAACM,UAAD,CAlBM,CAAT;;AAoBA,QAAMoB,mBAAmB,GAAGC,KAAK,IAAI;AACnCpB,IAAAA,aAAa,CAACoB,KAAD,CAAb,CADmC,CAEnC;AACD,GAHD,CA3BiB,CAgCjB;AACA;;;AAEA,MAAIC,SAAJ;;AACA,MAAIpB,SAAJ,EAAe;AACboB,IAAAA,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,gBAAG,QAAC,eAAD;AAAiB,MAAA,MAAM,EAAEnB;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAZ;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,SAAD;AACE,MAAA,UAAU,EAAEH,UADd;AAEE,MAAA,mBAAmB,EAAEoB;AAFvB;AAAA;AAAA;AAAA;AAAA,YADF,EAMGE,SANH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CApDD;;IAAMvB,I;UAG0BN,S;;;KAH1BM,I;AAsDN,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport MoviesContainer from './MoviesContainer';\nimport SearchBox from './SearchBox';\nimport { useMovies } from '../hooks/useMovies';\nimport { useFetch } from '../hooks/useFetch';\nimport M from 'materialize-css';\n\n// initializing materialize autofill input\nconst autoInput = M.Autocomplete.init();\nconst Home = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { isLoading, movies } = useMovies(searchTerm);\n  const [inputOptions, setInputOptions] = useState(null);\n\n  // building input options object\n  useEffect(() => {\n    useFetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`\n    )\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        let options = {};\n        data.map(movie => {\n          return (options[`${movie.movieData.original_title}`] = null);\n        });\n        console.log('options :>> ', options);\n        return options;\n      })\n      .then(opts => {\n        autoInput.updateData(opts);\n      });\n  }, [searchTerm]);\n\n  const onSearchInputChange = input => {\n    setSearchTerm(input);\n    // getInputOptions(movies);\n  };\n\n  // displaying options\n  // autoInput.updateData(getInputOptions(movies));\n\n  let moviesDom;\n  if (isLoading) {\n    moviesDom = <div>Loading...</div>;\n  } else {\n    moviesDom = <MoviesContainer movies={movies} />;\n  }\n\n  return (\n    <div>\n      <SearchBox\n        searchTerm={searchTerm}\n        onSearchInputChange={onSearchInputChange}\n      />\n      {/* <MoviesContainer movies={searchOutput} /> */}\n      {moviesDom}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}