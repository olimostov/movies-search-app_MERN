{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useFetch } from './useFetch';\nconst apiKey = process.env.REACT_APP_API_KEY;\nexport const useMovies = searchTerm => {\n  _s();\n\n  const [lastSearchTermApiCalled, setLastSearchTermApiCalled] = useState(null);\n  const [apiResults, setApiResults] = useState(null);\n\n  if (searchTerm !== '' && searchTerm !== lastSearchTermApiCalled) {\n    setApiResults(null);\n    setLastSearchTermApiCalled(searchTerm);\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log('Got movies list from API :>> ', data.results);\n      return data.results;\n    }).then(data => {\n      return new Promise(async resolve => {\n        console.log('Starting to load each movie in a loop...');\n\n        for (let i = 0; i < data.length; i++) {\n          const oneMovie = data[i]; // console.log(`Loading movie ${oneMovie.id}...`);\n\n          const movieDataApiResult = await fetch(`https://api.themoviedb.org/3/movie/${oneMovie.id}?api_key=${apiKey}&language=en-US`);\n          const movieData = await movieDataApiResult.json();\n          oneMovie.movieData = movieData;\n        }\n\n        resolve(data);\n      });\n    }).then(data => {\n      console.log('REACHED THE END OF ALL FETCHING!!!', data);\n      setApiResults(data);\n    });\n  }\n\n  const isLoading = searchTerm !== '' && apiResults === null;\n  return {\n    isLoading,\n    movies: apiResults === undefined || apiResults === null ? [] : apiResults\n  };\n};\n\n_s(useMovies, \"n3OrBAfJBTalV7tDKHbhA1SNjbc=\");","map":{"version":3,"sources":["/Users/olimostovyi/Documents/WebDev/projects/movie-search-app/client/src/hooks/useMovies.js"],"names":["useEffect","useState","useFetch","apiKey","process","env","REACT_APP_API_KEY","useMovies","searchTerm","lastSearchTermApiCalled","setLastSearchTermApiCalled","apiResults","setApiResults","fetch","then","res","json","data","console","log","results","Promise","resolve","i","length","oneMovie","movieDataApiResult","id","movieData","isLoading","movies","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;AAEA,OAAO,MAAMC,SAAS,GAAGC,UAAU,IAAI;AAAA;;AACrC,QAAM,CAACC,uBAAD,EAA0BC,0BAA1B,IAAwDT,QAAQ,CAAC,IAAD,CAAtE;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,IAAD,CAA5C;;AAEA,MAAIO,UAAU,KAAK,EAAf,IAAqBA,UAAU,KAAKC,uBAAxC,EAAiE;AAC/DG,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,IAAAA,0BAA0B,CAACF,UAAD,CAA1B;AAEAK,IAAAA,KAAK,CACF,qDAAoDV,MAAO,UAASK,UAAW,sBAD7E,CAAL,CAGGM,IAHH,CAGQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KALH,EAMGF,IANH,CAMQG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,IAAI,CAACG,OAAlD;AACA,aAAOH,IAAI,CAACG,OAAZ;AACD,KATH,EAUGN,IAVH,CAUQG,IAAI,IAAI;AACZ,aAAO,IAAII,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAClCJ,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,gBAAME,QAAQ,GAAGR,IAAI,CAACM,CAAD,CAArB,CADoC,CAEpC;;AACA,gBAAMG,kBAAkB,GAAG,MAAMb,KAAK,CACnC,sCAAqCY,QAAQ,CAACE,EAAG,YAAWxB,MAAO,iBADhC,CAAtC;AAGA,gBAAMyB,SAAS,GAAG,MAAMF,kBAAkB,CAACV,IAAnB,EAAxB;AACAS,UAAAA,QAAQ,CAACG,SAAT,GAAqBA,SAArB;AACD;;AACDN,QAAAA,OAAO,CAACL,IAAD,CAAP;AACD,OAZM,CAAP;AAaD,KAxBH,EAyBGH,IAzBH,CAyBQG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,IAAlD;AACAL,MAAAA,aAAa,CAACK,IAAD,CAAb;AACD,KA5BH;AA6BD;;AAED,QAAMY,SAAS,GAAGrB,UAAU,KAAK,EAAf,IAAqBG,UAAU,KAAK,IAAtD;AAEA,SAAO;AACLkB,IAAAA,SADK;AAELC,IAAAA,MAAM,EAAEnB,UAAU,KAAKoB,SAAf,IAA4BpB,UAAU,KAAK,IAA3C,GAAkD,EAAlD,GAAuDA;AAF1D,GAAP;AAID,CA7CM;;GAAMJ,S","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useFetch } from './useFetch';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nexport const useMovies = searchTerm => {\n  const [lastSearchTermApiCalled, setLastSearchTermApiCalled] = useState(null);\n  const [apiResults, setApiResults] = useState(null);\n\n  if (searchTerm !== '' && searchTerm !== lastSearchTermApiCalled) {\n    setApiResults(null);\n    setLastSearchTermApiCalled(searchTerm);\n\n    fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`\n    )\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log('Got movies list from API :>> ', data.results);\n        return data.results;\n      })\n      .then(data => {\n        return new Promise(async resolve => {\n          console.log('Starting to load each movie in a loop...');\n          for (let i = 0; i < data.length; i++) {\n            const oneMovie = data[i];\n            // console.log(`Loading movie ${oneMovie.id}...`);\n            const movieDataApiResult = await fetch(\n              `https://api.themoviedb.org/3/movie/${oneMovie.id}?api_key=${apiKey}&language=en-US`\n            );\n            const movieData = await movieDataApiResult.json();\n            oneMovie.movieData = movieData;\n          }\n          resolve(data);\n        });\n      })\n      .then(data => {\n        console.log('REACHED THE END OF ALL FETCHING!!!', data);\n        setApiResults(data);\n      });\n  }\n\n  const isLoading = searchTerm !== '' && apiResults === null;\n\n  return {\n    isLoading,\n    movies: apiResults === undefined || apiResults === null ? [] : apiResults\n  };\n};\n"]},"metadata":{},"sourceType":"module"}