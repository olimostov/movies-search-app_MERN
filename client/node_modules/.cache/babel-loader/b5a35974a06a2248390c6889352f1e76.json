{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useFetch } from './useFetch';\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nconst fetchMovieData = async movie => {\n  // console.log('in fetch movie data');\n  const res = await fetch(`https://api.themoviedb.org/3/movie/${movie.id}?api_key=${apiKey}&language=en-US`);\n  const data = await res.json();\n  console.log('data:', data);\n  return data;\n};\n\nexport const useMovies = searchTerm => {\n  _s();\n\n  const [lastSearchTermApiCalled, setLastSearchTermApiCalled] = useState(null);\n  const [apiResults, setApiResults] = useState(null); // const { loading, error, data, fetchNow } = useFetch();\n\n  if (searchTerm !== '' && searchTerm !== lastSearchTermApiCalled) {\n    setApiResults(null);\n    setLastSearchTermApiCalled(searchTerm);\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log('Got movies list from API :>> ', data.results);\n      return data.results;\n    }).then(data => {\n      const allPromises = Promise.all(async resolve => {\n        console.log('Starting to load each movie in a loop...');\n\n        for (let i = 0; i < data.length; i++) {\n          const oneMovie = data[i]; // console.log(`Loading movie ${oneMovie.id}...`);\n\n          const movieDataApiResult = await fetch(`https://api.themoviedb.org/3/movie/${oneMovie.id}?api_key=${apiKey}&language=en-US`);\n          const movieData = await movieDataApiResult.json(); // console.log(\n          //   `JSON-decoded the API response for ${oneMovie.id}`,\n          //   movieData\n          // );\n\n          oneMovie.movieData = movieData;\n        }\n\n        resolve(data);\n      });\n      console.log(allPromises);\n    }).then(data => {\n      console.log('REACHED THE END OF ALL FETCHING!!!', data);\n      setApiResults(data);\n    });\n  }\n\n  const isLoading = searchTerm !== '' && apiResults === null;\n  return {\n    isLoading,\n    movies: apiResults === undefined || apiResults === null ? [] : apiResults\n  };\n};\n\n_s(useMovies, \"n3OrBAfJBTalV7tDKHbhA1SNjbc=\");","map":{"version":3,"sources":["/Users/olimostovyi/Documents/WebDev/projects/movie-search-app/client/src/hooks/useMovies.js"],"names":["useEffect","useState","useFetch","apiKey","process","env","REACT_APP_API_KEY","fetchMovieData","movie","res","fetch","id","data","json","console","log","useMovies","searchTerm","lastSearchTermApiCalled","setLastSearchTermApiCalled","apiResults","setApiResults","then","results","allPromises","Promise","all","resolve","i","length","oneMovie","movieDataApiResult","movieData","isLoading","movies","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;;AAEA,MAAMC,cAAc,GAAG,MAAMC,KAAN,IAAe;AACpC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,sCAAqCF,KAAK,CAACG,EAAG,YAAWR,MAAO,iBAD5C,CAAvB;AAGA,QAAMS,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB;AACA,SAAOA,IAAP;AACD,CARD;;AAUA,OAAO,MAAMI,SAAS,GAAGC,UAAU,IAAI;AAAA;;AACrC,QAAM,CAACC,uBAAD,EAA0BC,0BAA1B,IAAwDlB,QAAQ,CAAC,IAAD,CAAtE;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,IAAD,CAA5C,CAFqC,CAIrC;;AAEA,MAAIgB,UAAU,KAAK,EAAf,IAAqBA,UAAU,KAAKC,uBAAxC,EAAiE;AAC/DG,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,IAAAA,0BAA0B,CAACF,UAAD,CAA1B;AAEAP,IAAAA,KAAK,CACF,qDAAoDP,MAAO,UAASc,UAAW,sBAD7E,CAAL,CAGGK,IAHH,CAGQb,GAAG,IAAI;AACX,aAAOA,GAAG,CAACI,IAAJ,EAAP;AACD,KALH,EAMGS,IANH,CAMQV,IAAI,IAAI;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CH,IAAI,CAACW,OAAlD;AACA,aAAOX,IAAI,CAACW,OAAZ;AACD,KATH,EAUGD,IAVH,CAUQV,IAAI,IAAI;AACZ,YAAMY,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAY,MAAMC,OAAN,IAAiB;AAC/Cb,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;;AACA,aAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,IAAI,CAACiB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,gBAAME,QAAQ,GAAGlB,IAAI,CAACgB,CAAD,CAArB,CADoC,CAEpC;;AACA,gBAAMG,kBAAkB,GAAG,MAAMrB,KAAK,CACnC,sCAAqCoB,QAAQ,CAACnB,EAAG,YAAWR,MAAO,iBADhC,CAAtC;AAGA,gBAAM6B,SAAS,GAAG,MAAMD,kBAAkB,CAAClB,IAAnB,EAAxB,CANoC,CAOpC;AACA;AACA;AACA;;AACAiB,UAAAA,QAAQ,CAACE,SAAT,GAAqBA,SAArB;AACD;;AACDL,QAAAA,OAAO,CAACf,IAAD,CAAP;AACD,OAhBmB,CAApB;AAiBAE,MAAAA,OAAO,CAACC,GAAR,CAAYS,WAAZ;AACD,KA7BH,EA8BGF,IA9BH,CA8BQV,IAAI,IAAI;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDH,IAAlD;AACAS,MAAAA,aAAa,CAACT,IAAD,CAAb;AACD,KAjCH;AAkCD;;AAED,QAAMqB,SAAS,GAAGhB,UAAU,KAAK,EAAf,IAAqBG,UAAU,KAAK,IAAtD;AAEA,SAAO;AACLa,IAAAA,SADK;AAELC,IAAAA,MAAM,EAAEd,UAAU,KAAKe,SAAf,IAA4Bf,UAAU,KAAK,IAA3C,GAAkD,EAAlD,GAAuDA;AAF1D,GAAP;AAID,CApDM;;GAAMJ,S","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useFetch } from './useFetch';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nconst fetchMovieData = async movie => {\n  // console.log('in fetch movie data');\n  const res = await fetch(\n    `https://api.themoviedb.org/3/movie/${movie.id}?api_key=${apiKey}&language=en-US`\n  );\n  const data = await res.json();\n  console.log('data:', data);\n  return data;\n};\n\nexport const useMovies = searchTerm => {\n  const [lastSearchTermApiCalled, setLastSearchTermApiCalled] = useState(null);\n  const [apiResults, setApiResults] = useState(null);\n\n  // const { loading, error, data, fetchNow } = useFetch();\n\n  if (searchTerm !== '' && searchTerm !== lastSearchTermApiCalled) {\n    setApiResults(null);\n    setLastSearchTermApiCalled(searchTerm);\n\n    fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchTerm}&include_adult=false`\n    )\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        console.log('Got movies list from API :>> ', data.results);\n        return data.results;\n      })\n      .then(data => {\n        const allPromises = Promise.all(async resolve => {\n          console.log('Starting to load each movie in a loop...');\n          for (let i = 0; i < data.length; i++) {\n            const oneMovie = data[i];\n            // console.log(`Loading movie ${oneMovie.id}...`);\n            const movieDataApiResult = await fetch(\n              `https://api.themoviedb.org/3/movie/${oneMovie.id}?api_key=${apiKey}&language=en-US`\n            );\n            const movieData = await movieDataApiResult.json();\n            // console.log(\n            //   `JSON-decoded the API response for ${oneMovie.id}`,\n            //   movieData\n            // );\n            oneMovie.movieData = movieData;\n          }\n          resolve(data);\n        });\n        console.log(allPromises);\n      })\n      .then(data => {\n        console.log('REACHED THE END OF ALL FETCHING!!!', data);\n        setApiResults(data);\n      });\n  }\n\n  const isLoading = searchTerm !== '' && apiResults === null;\n\n  return {\n    isLoading,\n    movies: apiResults === undefined || apiResults === null ? [] : apiResults\n  };\n};\n"]},"metadata":{},"sourceType":"module"}